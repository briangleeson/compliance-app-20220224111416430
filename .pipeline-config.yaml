version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    source scripts/code_setup.sh

test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    cd ../"$(load_repo app-repo path)"
    npm install
    npm ci
    npm test

static-scan:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    if [ -z "$(get_env opt-in-sonar "")" ]; then
      echo "If you want to enable this stage, add 'opt-in-sonar' parameter to your pipeline with any value." >&2
    else
      chmod 777 scripts/sonarqube/sonarqube_run
      scripts/sonarqube/sonarqube_run
    fi

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/build_setup.sh
    source scripts/build.sh

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/deploy_setup.sh
    source scripts/deploy.sh

sign-artifact:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/image-signing:1.0.0@sha256:e9d8e354668ba3d40be2aaee08298d2aa7f0e1c8a1829cca4094ec93830e3e6a
  script: |
      #!/usr/bin/env bash
      STAGE_DIND="true"
      STAGE_ABORT_ON_FAILURE="false"
      STAGE_IMAGE_PULL_POLICY="IfNotPresent"

      source scripts/sign_image.sh

acceptance-test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    npm install
    npm ci
    export APP_URL=$(cat ../app-url)
    npm run acceptance-test

release:
  abort_on_failure: false
  image: icr.io/continuous-delivery/toolchains/devsecops/compliance-baseimage:2.38.2_commons-0.2.2@sha256:4681288df0f601002c9d963f66258699b61b57c3c9c539d8f305e0ef351d89ab
  script: |
    #!/usr/bin/env bash

    source scripts/release.sh

scan-artifact:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    source scripts/va_scan.sh

dynamic-scan:
  dind: true 
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    echo "Dynamic Application Scan is in feature preview mode."
    echo "To setup dynamic scan for your app follow the documentation at https://cloud.ibm.com/docs/devsecops?topic=devsecops-custom-scripts."
    
    export APP_URL=$(cat ../app-url)
    echo "APP_URL is ${APP_URL}"

    set_env "app-url" "$APP_URL"    
    set_env "target-application-server-url" "$APP_URL"    
    
    source scripts/zap/trigger_zap_scans
#!/usr/bin/env bash

source "${ONE_PIPELINE_PATH}/tools/retry"

export IKS_BETA_VERSION=1

IBMCLOUD_API=$(get_env ibmcloud-api "https://cloud.ibm.com")
IBMCLOUD_IKS_REGION="$(get_env dev-region | awk -F ":" '{print $NF}')"
IBMCLOUD_IKS_CLUSTER_NAME="$(get_env cluster-name)"
if [ -f /config/api-key ]; then
  IBMCLOUD_API_KEY="$(cat /config/api-key)" # pragma: allowlist secret
else
  IBMCLOUD_API_KEY="$(cat /config/ibmcloud-api-key)" # pragma: allowlist secret
fi

export SONAR_INSTANCE
export SONAR_HOST_URL
export SONAR_USER
export SONAR_PASS
export SONAR_CONFIGURED

read -r SONAR_CONFIGURED <<< "$(get_env sonarqube | jq . 2>/dev/null)"

if [ -n "$SONAR_CONFIGURED" ]; then
  read -r SONAR_INSTANCE <<< "$(get_env sonarqube | jq -r '.parameters.name')"
  read -r SONAR_HOST_URL <<< "$(get_env sonarqube | jq -r '.parameters.dashboard_url' | sed 's:/*$::')"
  read -r SONAR_USER <<< "$(get_env sonarqube | jq -r '.parameters.user_login')"
  read -r SONAR_PASS <<< "$(get_env sonarqube | jq -r '.parameters.user_password')"
elif [[ -n "$BREAK_GLASS" ]]; then
  printf "Break-Glass mode is on, skipping the rest of the task..." >&2
  exit 0
else
  SONAR_HOST_URL=http://localhost:9001
  printf "\n\nLogin to IBM Cloud" >&2
  printf "\n======================\n\n" >&2
  retry 5 2 \
    ibmcloud login -r "$IBMCLOUD_IKS_REGION" --apikey @/config/ibmcloud-api-key -a "$IBMCLOUD_API"

  printf "\n\nDownload the Kubernetes configuration files to connect to your cluster by using 'kubectl' commands" >&2
  printf "\n======================\n\n" >&2
  retry 5 2 \
    ibmcloud ks cluster config --cluster "$IBMCLOUD_IKS_CLUSTER_NAME"
    ibmcloud ks cluster get --cluster "${IBMCLOUD_IKS_CLUSTER_NAME}" --json > "${IBMCLOUD_IKS_CLUSTER_NAME}.json"

  if which oc > /dev/null && jq -e '.type=="openshift"' "${IBMCLOUD_IKS_CLUSTER_NAME}.json" > /dev/null; then
    echo "${IBMCLOUD_IKS_CLUSTER_NAME} is an openshift cluster. Doing the appropriate oc login to target it"
    oc login -u apikey -p "${IBMCLOUD_API_KEY}"
  fi

  SONAR_INSTANCE=$(kubectl get deployment | grep "cocoa-sonarqube")

  if [ "$SONAR_INSTANCE" ]; then
    SONAR_INSTANCE_NAME=$(kubectl get deployment | grep "cocoa-sonarqube" | awk 'FNR == 1 {print $1}')

    kubectl get secret "$SONAR_INSTANCE_NAME" -o jsonpath='{.data.token}' | base64 --decode > /tmp/sonarqube-token
  fi
fi
